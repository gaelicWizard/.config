#!/bin/false

echo "This file contains environment settings that are deprecated..."

return 1

# All of these settings are set in ~/.MacOSX/environment


# another color option, this one for BSD's ls
if [ -z "${CLICOLOR:-}" ];then echo -n
	export CLICOLOR='1' # can be set to anything, I believe
fi



# Use ssh instead of rsh for cvs
if [ -z "{CVS_RSH:-}" ];then echo -n
    export CVS_RSH="ssh"
fi

# Use ssh instead of rsh for tar
if [ -z "${TAR_RSH:-}" ];then echo -n
    export TAR_RSH="ssh"
fi

# Set some defaults for tar, so that it behaves more reasonabley
if [ -z "${TAR_OPTIONS:-}" ];then echo -n
    export TAR_OPTIONS='--exclude .DS_Store'
fi

# Set a much better default prompt for sudo()
if [ -z "${SUDO_PROMPT:-}" ]; then echo -n
    export SUDO_PROMPT="%u@%h's password: "
fi

# Set $MAKEFILEPATH, sorta used if you build darwin stuff...
if [ -z "${MAKEFILEPATH:-}" -a -d '/Developer/Makefiles' ];then echo -n
    export MAKEFILEPATH='/Developer/Makefiles' 
fi

# Set $LANG to something useful, only useful if libiconv 
# is installed and works ... (i.e. panther++)
if [ -z "${LANG:-}" ];then echo -n
    export LANG='en_US.UTF-8' # I'm in Great Brittan! ...not...
    export LC_ALL="$LANG"
    unset LC_COLLATE LC_CTYPE LC_MESSAGES LC_MONETARY LC_NUMERIC LC_TIME
fi



# Set $DISPLAY
if [ -z "${DISPLAY:-}" ]; then echo -n
    export DISPLAY=":0"
fi




#function sleep { read -st0; command sleep "$@"; } 
    # The point of this is to read zero characters from stdin, why?
    #  Certain file sharing systems embed their connection on ssh, forwarding ports and using sleep...
    #  and piping the password to stdin... and it fails because nobody reads that password. So, here I do.
    # This does NOT clear ANY characters from the stdin stream, so any legit piping continues to work.
    # This seems not to work as intended... I'm not sure what to do about it... so I'm commenting it out...

